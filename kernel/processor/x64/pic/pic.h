/// @file
/// @brief Functions to handle the PIC

#pragma once

#include <stdint.h>

// Interface for controlling the system's various PICs or APIC/xAPIC/x2APICs
void proc_conf_interrupt_control_sys(uint32_t num_procs);
void proc_conf_local_int_controller();
void proc_configure_global_int_ctrlrs();

/// @brief Legacy PIC IRQ setup
///
extern "C" void asm_proc_configure_irqs();

/// @brief Disables the system's legacy PIC.
///
extern "C" void asm_proc_disable_legacy_pic();

/// @brief Acknowledges an IRQ generated by a legacy PIC.
///
extern "C" void asm_proc_legacy_pic_irq_ack();

/// @brief Short codes for sending IPI messages
///
enum class PROC_IPI_SHORT_TARGET
{
  NONE = 0, ///< No short code in use.
  SELF = 1, ///< Short code for send message to self
  ALL_INCL_SELF = 2, ///< Short code for send message to all processors
  ALL_EXCL_SELF = 3, ///< Short code for send message to all processors except this one.
};

/// @brief IPI interrupt types
///
enum class PROC_IPI_INTERRUPT
{
  FIXED = 0, ///< Fixed vector interrupt
  LOWEST_PRI = 1, ///< Lowest priority interrupt
  SMI = 2, ///< SMI
  NMI = 4, ///< NMI
  INIT = 5, ///< INIT command
  STARTUP = 6, ///< STARTUP command
};

void proc_send_ipi(uint32_t apic_dest,
                   PROC_IPI_SHORT_TARGET shorthand,
                   PROC_IPI_INTERRUPT interrupt,
                   uint8_t vector,
                   const bool wait_for_delivery);
