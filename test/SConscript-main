# Contains tests that use the "normal" set of required libraries. The various support libraries continue to have their
# own SConscript files. We do not link the various tests into a static library first because otherwise Google Test
# loses track of the test cases - the test classes must be visible in the "main" part of the test program.

Import('env')

obj = [ ]
files = [ "dummy_libs/processor/processor.dummy.cpp",
          "dummy_libs/processor/timing.dummy.cpp",
          "dummy_libs/devices/virt_disk/virt_disk.cpp",

          "devices/block/proxy/proxy_tests.cpp",
          "devices/block/ramdisk/ramdisk_tests.cpp",
          "devices/dev_monitor.cpp",

          "klib/data_structures/ds_1.cpp",

          "klib/math/maths_1.cpp",

          "klib/memory/memory_1.cpp",
          "klib/memory/memory_2.cpp",

          "klib/misc/misc_1.cpp",
          "klib/misc/misc_2.cpp",

          "klib/synch/synch_1.cpp",
          "klib/synch/synch_2_lock_wrapper.cpp",

          "object_mgr/object_mgr_1.cpp",
          "object_mgr/object_mgr_2.cpp",

          "processor/scheduler/scheduler_1.cpp",
          "processor/scheduler/scheduler_proc_start_exit.cpp",
          "processor/irq_handler.cpp",
          "processor/process_msg_handling.cpp",
          "processor/synch_objects.cpp",
          "processor/work_queue.cpp",
          "processor/work_queue_mt.cpp",

          "system_tree/system_tree_1.cpp",
          "system_tree/system_tree_2.cpp",
          "system_tree/system_tree_3_pipes.cpp",
          "system_tree/system_tree_6_proc.cpp",
          "system_tree/system_tree_7_enum.cpp",

          "system_tree/fs/fat/fat_fs_1_read.cpp",
          "system_tree/fs/fat/fat_fs_2_write.cpp",
          "system_tree/fs/fat/fat_fs_3_create.cpp",
          "system_tree/fs/fat/fat_fs_4_rename.cpp",
          "system_tree/fs/fat/fat_fs_5_delete.cpp",
          "system_tree/fs/fat/fat_fs_6_large_read.cpp",

          "system_tree/fs/mem/mem_fs_1_basic.cpp",
          "system_tree/fs/mem/mem_fs_2_syscall.cpp",

          "tracing/tracing_1.cpp",
        ]

for f in files:
  obj = obj + [ env.Object(f) ]

Return ("obj")
